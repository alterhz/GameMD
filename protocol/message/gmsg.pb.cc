// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gproto {
namespace gather {

namespace {

const ::google::protobuf::Descriptor* MSG_C2G_HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_C2G_HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_G2C_HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_G2C_HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Deposit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Deposit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_AccountReg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_AccountReg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_RoleCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_RoleCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_BagExtend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_BagExtend_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_BuyInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_BuyInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_BuyCoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_BuyCoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Diamond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Diamond_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Coin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Coin_reflection_ = NULL;
const ::google::protobuf::Descriptor* INFO_ItemMes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INFO_ItemMes_reflection_ = NULL;
const ::google::protobuf::Descriptor* INFO_Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INFO_Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* INFO_HoleGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INFO_HoleGem_reflection_ = NULL;
const ::google::protobuf::Descriptor* INFO_Equipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INFO_Equipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Relive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Relive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_O2G_Arena_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_O2G_Arena_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gmsg_2eproto() {
  protobuf_AddDesc_gmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gmsg.proto");
  GOOGLE_CHECK(file != NULL);
  MSG_C2G_HeartBeat_descriptor_ = file->message_type(0);
  static const int MSG_C2G_HeartBeat_offsets_[1] = {
  };
  MSG_C2G_HeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_C2G_HeartBeat_descriptor_,
      MSG_C2G_HeartBeat::default_instance_,
      MSG_C2G_HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_C2G_HeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_C2G_HeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_C2G_HeartBeat));
  MSG_G2C_HeartBeat_descriptor_ = file->message_type(1);
  static const int MSG_G2C_HeartBeat_offsets_[1] = {
  };
  MSG_G2C_HeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_G2C_HeartBeat_descriptor_,
      MSG_G2C_HeartBeat::default_instance_,
      MSG_G2C_HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_G2C_HeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_G2C_HeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_G2C_HeartBeat));
  MSG_O2G_Deposit_descriptor_ = file->message_type(2);
  static const int MSG_O2G_Deposit_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, rolesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, diamond_),
  };
  MSG_O2G_Deposit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Deposit_descriptor_,
      MSG_O2G_Deposit::default_instance_,
      MSG_O2G_Deposit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Deposit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Deposit));
  MSG_O2G_AccountReg_descriptor_ = file->message_type(3);
  static const int MSG_O2G_AccountReg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_AccountReg, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_AccountReg, account_),
  };
  MSG_O2G_AccountReg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_AccountReg_descriptor_,
      MSG_O2G_AccountReg::default_instance_,
      MSG_O2G_AccountReg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_AccountReg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_AccountReg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_AccountReg));
  MSG_O2G_RoleCreate_descriptor_ = file->message_type(4);
  static const int MSG_O2G_RoleCreate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_RoleCreate, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_RoleCreate, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_RoleCreate, rolesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_RoleCreate, rolename_),
  };
  MSG_O2G_RoleCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_RoleCreate_descriptor_,
      MSG_O2G_RoleCreate::default_instance_,
      MSG_O2G_RoleCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_RoleCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_RoleCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_RoleCreate));
  MSG_O2G_Login_descriptor_ = file->message_type(5);
  static const int MSG_O2G_Login_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, rolesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, offlinetime_),
  };
  MSG_O2G_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Login_descriptor_,
      MSG_O2G_Login::default_instance_,
      MSG_O2G_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Login));
  MSG_O2G_BagExtend_descriptor_ = file->message_type(6);
  static const int MSG_O2G_BagExtend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BagExtend, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BagExtend, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BagExtend, rolesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BagExtend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BagExtend, extendnum_),
  };
  MSG_O2G_BagExtend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_BagExtend_descriptor_,
      MSG_O2G_BagExtend::default_instance_,
      MSG_O2G_BagExtend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BagExtend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BagExtend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_BagExtend));
  MSG_O2G_BuyInstance_descriptor_ = file->message_type(7);
  static const int MSG_O2G_BuyInstance_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, rolesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, instancesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, buycount_),
  };
  MSG_O2G_BuyInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_BuyInstance_descriptor_,
      MSG_O2G_BuyInstance::default_instance_,
      MSG_O2G_BuyInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_BuyInstance));
  MSG_O2G_BuyCoin_descriptor_ = file->message_type(8);
  static const int MSG_O2G_BuyCoin_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, rolesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, spenddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, coin_),
  };
  MSG_O2G_BuyCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_BuyCoin_descriptor_,
      MSG_O2G_BuyCoin::default_instance_,
      MSG_O2G_BuyCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_BuyCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_BuyCoin));
  MSG_O2G_Diamond_descriptor_ = file->message_type(9);
  static const int MSG_O2G_Diamond_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, changediamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, totaldiamond_),
  };
  MSG_O2G_Diamond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Diamond_descriptor_,
      MSG_O2G_Diamond::default_instance_,
      MSG_O2G_Diamond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Diamond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Diamond));
  MSG_O2G_Coin_descriptor_ = file->message_type(10);
  static const int MSG_O2G_Coin_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, changecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, totalcoin_),
  };
  MSG_O2G_Coin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Coin_descriptor_,
      MSG_O2G_Coin::default_instance_,
      MSG_O2G_Coin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Coin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Coin));
  INFO_ItemMes_descriptor_ = file->message_type(11);
  static const int INFO_ItemMes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_ItemMes, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_ItemMes, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_ItemMes, itemsn_),
  };
  INFO_ItemMes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INFO_ItemMes_descriptor_,
      INFO_ItemMes::default_instance_,
      INFO_ItemMes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_ItemMes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_ItemMes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INFO_ItemMes));
  INFO_Property_descriptor_ = file->message_type(12);
  static const int INFO_Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Property, propertytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Property, propertyval_),
  };
  INFO_Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INFO_Property_descriptor_,
      INFO_Property::default_instance_,
      INFO_Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INFO_Property));
  INFO_HoleGem_descriptor_ = file->message_type(13);
  static const int INFO_HoleGem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_HoleGem, holeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_HoleGem, gemsn_),
  };
  INFO_HoleGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INFO_HoleGem_descriptor_,
      INFO_HoleGem::default_instance_,
      INFO_HoleGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_HoleGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_HoleGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INFO_HoleGem));
  INFO_Equipment_descriptor_ = file->message_type(14);
  static const int INFO_Equipment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Equipment, basemes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Equipment, strelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Equipment, basepropty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Equipment, addtional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Equipment, holegem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Equipment, curholenum_),
  };
  INFO_Equipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INFO_Equipment_descriptor_,
      INFO_Equipment::default_instance_,
      INFO_Equipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Equipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INFO_Equipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INFO_Equipment));
  MSG_O2G_Item_descriptor_ = file->message_type(15);
  static const int MSG_O2G_Item_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, itemsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, equip_),
  };
  MSG_O2G_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Item_descriptor_,
      MSG_O2G_Item::default_instance_,
      MSG_O2G_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Item));
  MSG_O2G_Equip_descriptor_ = file->message_type(16);
  static const int MSG_O2G_Equip_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, equipsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, maketype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, equipbefore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, equipafter_),
  };
  MSG_O2G_Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Equip_descriptor_,
      MSG_O2G_Equip::default_instance_,
      MSG_O2G_Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Equip));
  MSG_O2G_Relive_descriptor_ = file->message_type(17);
  static const int MSG_O2G_Relive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Relive, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Relive, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Relive, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Relive, instancesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Relive, wastediamond_),
  };
  MSG_O2G_Relive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Relive_descriptor_,
      MSG_O2G_Relive::default_instance_,
      MSG_O2G_Relive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Relive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Relive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Relive));
  MSG_O2G_Instance_descriptor_ = file->message_type(18);
  static const int MSG_O2G_Instance_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Instance, instancesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Instance, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Instance, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Instance, deadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Instance, roleid_),
  };
  MSG_O2G_Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Instance_descriptor_,
      MSG_O2G_Instance::default_instance_,
      MSG_O2G_Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Instance));
  MSG_O2G_Arena_descriptor_ = file->message_type(19);
  static const int MSG_O2G_Arena_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Arena, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Arena, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Arena, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Arena, result_),
  };
  MSG_O2G_Arena_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_O2G_Arena_descriptor_,
      MSG_O2G_Arena::default_instance_,
      MSG_O2G_Arena_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Arena, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_O2G_Arena, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_O2G_Arena));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_C2G_HeartBeat_descriptor_, &MSG_C2G_HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_G2C_HeartBeat_descriptor_, &MSG_G2C_HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Deposit_descriptor_, &MSG_O2G_Deposit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_AccountReg_descriptor_, &MSG_O2G_AccountReg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_RoleCreate_descriptor_, &MSG_O2G_RoleCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Login_descriptor_, &MSG_O2G_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_BagExtend_descriptor_, &MSG_O2G_BagExtend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_BuyInstance_descriptor_, &MSG_O2G_BuyInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_BuyCoin_descriptor_, &MSG_O2G_BuyCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Diamond_descriptor_, &MSG_O2G_Diamond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Coin_descriptor_, &MSG_O2G_Coin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INFO_ItemMes_descriptor_, &INFO_ItemMes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INFO_Property_descriptor_, &INFO_Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INFO_HoleGem_descriptor_, &INFO_HoleGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INFO_Equipment_descriptor_, &INFO_Equipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Item_descriptor_, &MSG_O2G_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Equip_descriptor_, &MSG_O2G_Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Relive_descriptor_, &MSG_O2G_Relive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Instance_descriptor_, &MSG_O2G_Instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_O2G_Arena_descriptor_, &MSG_O2G_Arena::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gmsg_2eproto() {
  delete MSG_C2G_HeartBeat::default_instance_;
  delete MSG_C2G_HeartBeat_reflection_;
  delete MSG_G2C_HeartBeat::default_instance_;
  delete MSG_G2C_HeartBeat_reflection_;
  delete MSG_O2G_Deposit::default_instance_;
  delete MSG_O2G_Deposit_reflection_;
  delete MSG_O2G_AccountReg::default_instance_;
  delete MSG_O2G_AccountReg_reflection_;
  delete MSG_O2G_RoleCreate::default_instance_;
  delete MSG_O2G_RoleCreate_reflection_;
  delete MSG_O2G_Login::default_instance_;
  delete MSG_O2G_Login_reflection_;
  delete MSG_O2G_BagExtend::default_instance_;
  delete MSG_O2G_BagExtend_reflection_;
  delete MSG_O2G_BuyInstance::default_instance_;
  delete MSG_O2G_BuyInstance_reflection_;
  delete MSG_O2G_BuyCoin::default_instance_;
  delete MSG_O2G_BuyCoin_reflection_;
  delete MSG_O2G_Diamond::default_instance_;
  delete MSG_O2G_Diamond_reflection_;
  delete MSG_O2G_Coin::default_instance_;
  delete MSG_O2G_Coin_reflection_;
  delete INFO_ItemMes::default_instance_;
  delete INFO_ItemMes_reflection_;
  delete INFO_Property::default_instance_;
  delete INFO_Property_reflection_;
  delete INFO_HoleGem::default_instance_;
  delete INFO_HoleGem_reflection_;
  delete INFO_Equipment::default_instance_;
  delete INFO_Equipment_reflection_;
  delete MSG_O2G_Item::default_instance_;
  delete MSG_O2G_Item_reflection_;
  delete MSG_O2G_Equip::default_instance_;
  delete MSG_O2G_Equip_reflection_;
  delete MSG_O2G_Relive::default_instance_;
  delete MSG_O2G_Relive_reflection_;
  delete MSG_O2G_Instance::default_instance_;
  delete MSG_O2G_Instance_reflection_;
  delete MSG_O2G_Arena::default_instance_;
  delete MSG_O2G_Arena_reflection_;
}

void protobuf_AddDesc_gmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngmsg.proto\022\rgproto.gather\"\023\n\021MSG_C2G_H"
    "eartBeat\"\023\n\021MSG_G2C_HeartBeat\"\252\001\n\017MSG_O2"
    "G_Deposit\022\020\n\010platform\030\n \002(\t\022\017\n\007account\030\024"
    " \002(\t\022\016\n\006roleid\030\036 \002(\005\022\020\n\010rolename\030( \002(\t\022\016"
    "\n\006rolesn\0302 \002(\005\022\021\n\trolelevel\030< \002(\005\022\020\n\010vip"
    "level\030F \002(\005\022\014\n\004type\030P \002(\005\022\017\n\007diamond\030Z \002"
    "(\005\"7\n\022MSG_O2G_AccountReg\022\020\n\010platform\030\n \002"
    "(\t\022\017\n\007account\030\024 \002(\t\"Y\n\022MSG_O2G_RoleCreat"
    "e\022\020\n\010platform\030\n \002(\t\022\017\n\007account\030\024 \002(\t\022\016\n\006"
    "rolesn\030\036 \002(\005\022\020\n\010rolename\030( \002(\t\"\220\001\n\rMSG_O"
    "2G_Login\022\020\n\010platform\030\n \002(\t\022\017\n\007account\030\024 "
    "\002(\t\022\016\n\006rolesn\030\036 \002(\005\022\021\n\trolelevel\030# \002(\005\022\020"
    "\n\010rolename\030( \002(\t\022\022\n\nonlinetime\0302 \002(\005\022\023\n\013"
    "offlinetime\030< \002(\005\"f\n\021MSG_O2G_BagExtend\022\016"
    "\n\006roleid\030\n \002(\005\022\020\n\010rolename\030\024 \002(\t\022\016\n\006role"
    "sn\030\036 \002(\005\022\014\n\004type\030( \002(\005\022\021\n\textendnum\0302 \002("
    "\005\"\222\001\n\023MSG_O2G_BuyInstance\022\016\n\006roleid\030\n \002("
    "\005\022\020\n\010rolename\030\024 \002(\t\022\016\n\006rolesn\030\036 \002(\005\022\021\n\tr"
    "olelevel\030( \002(\005\022\020\n\010viplevel\0302 \002(\005\022\022\n\ninst"
    "ancesn\030< \002(\005\022\020\n\010buycount\030F \002(\005\"\214\001\n\017MSG_O"
    "2G_BuyCoin\022\016\n\006roleid\030\n \002(\005\022\020\n\010rolename\030\024"
    " \002(\t\022\016\n\006rolesn\030\036 \002(\005\022\021\n\trolelevel\030( \002(\005\022"
    "\020\n\010viplevel\0302 \002(\005\022\024\n\014spenddiamond\030< \002(\005\022"
    "\014\n\004coin\030F \002(\005\"\243\001\n\017MSG_O2G_Diamond\022\017\n\007acc"
    "ount\030\n \002(\t\022\016\n\006roleid\030\024 \002(\005\022\020\n\010rolename\030\036"
    " \002(\t\022\021\n\trolelevel\030( \002(\005\022\014\n\004type\0302 \002(\005\022\017\n"
    "\007subtype\030< \002(\005\022\025\n\rchangediamond\030F \002(\005\022\024\n"
    "\014totaldiamond\030P \002(\005\"\211\001\n\014MSG_O2G_Coin\022\016\n\006"
    "roleid\030\n \002(\005\022\020\n\010rolename\030\024 \002(\t\022\021\n\trolele"
    "vel\030\036 \002(\005\022\014\n\004type\030( \002(\005\022\017\n\007subtype\0302 \002(\005"
    "\022\022\n\nchangecoin\030< \002(\005\022\021\n\ttotalcoin\030F \002(\005\""
    "7\n\014INFO_ItemMes\022\n\n\002id\030\001 \002(\005\022\013\n\003num\030\002 \002(\005"
    "\022\016\n\006itemsn\030\003 \002(\005\":\n\rINFO_Property\022\024\n\014pro"
    "pertytype\030\001 \002(\005\022\023\n\013propertyval\030\002 \002(\005\"-\n\014"
    "INFO_HoleGem\022\016\n\006holeid\030\001 \002(\005\022\r\n\005gemsn\030\002 "
    "\002(\005\"\330\001\n\016INFO_Equipment\022,\n\007basemes\030\001 \002(\0132"
    "\033.gproto.gather.INFO_ItemMes\022\021\n\tstreleve"
    "l\030\002 \002(\005\022\022\n\nbasepropty\030\003 \003(\005\022/\n\taddtional"
    "\030\004 \003(\0132\034.gproto.gather.INFO_Property\022,\n\007"
    "holegem\030\005 \003(\0132\033.gproto.gather.INFO_HoleG"
    "em\022\022\n\ncurholenum\030\006 \002(\005\"\273\001\n\014MSG_O2G_Item\022"
    "\016\n\006itemsn\030\n \002(\005\022\020\n\010itemtype\030\024 \002(\005\022\013\n\003num"
    "\030\036 \002(\005\022\014\n\004type\030( \002(\005\022\013\n\003way\0302 \002(\005\022\016\n\006rol"
    "eid\030< \002(\005\022\020\n\010rolename\030F \002(\t\022\021\n\trolelevel"
    "\030P \002(\005\022,\n\005equip\030Z \001(\0132\035.gproto.gather.IN"
    "FO_Equipment\"\314\001\n\rMSG_O2G_Equip\022\016\n\006roleid"
    "\030\n \002(\005\022\020\n\010rolename\030\024 \002(\t\022\017\n\007equipsn\030\036 \002("
    "\005\022\017\n\007equipid\030( \002(\005\022\020\n\010maketype\0302 \002(\005\0222\n\013"
    "equipbefore\030< \002(\0132\035.gproto.gather.INFO_E"
    "quipment\0221\n\nequipafter\030F \002(\0132\035.gproto.ga"
    "ther.INFO_Equipment\"o\n\016MSG_O2G_Relive\022\016\n"
    "\006roleid\030\n \002(\005\022\020\n\010rolename\030\024 \002(\t\022\021\n\trolel"
    "evel\030\036 \002(\005\022\022\n\ninstancesn\030( \002(\005\022\024\n\014wasted"
    "iamond\0302 \002(\005\"k\n\020MSG_O2G_Instance\022\022\n\ninst"
    "ancesn\030\n \002(\005\022\016\n\006result\030\024 \002(\005\022\020\n\010passtime"
    "\030\036 \002(\005\022\021\n\tdeadtimes\030( \002(\005\022\016\n\006roleid\0302 \003("
    "\005\"T\n\rMSG_O2G_Arena\022\016\n\006roleid\030\n \002(\005\022\020\n\010ro"
    "lename\030\024 \002(\t\022\021\n\trolelevel\030\036 \002(\005\022\016\n\006resul"
    "t\030( \002(\005", 2327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gmsg.proto", &protobuf_RegisterTypes);
  MSG_C2G_HeartBeat::default_instance_ = new MSG_C2G_HeartBeat();
  MSG_G2C_HeartBeat::default_instance_ = new MSG_G2C_HeartBeat();
  MSG_O2G_Deposit::default_instance_ = new MSG_O2G_Deposit();
  MSG_O2G_AccountReg::default_instance_ = new MSG_O2G_AccountReg();
  MSG_O2G_RoleCreate::default_instance_ = new MSG_O2G_RoleCreate();
  MSG_O2G_Login::default_instance_ = new MSG_O2G_Login();
  MSG_O2G_BagExtend::default_instance_ = new MSG_O2G_BagExtend();
  MSG_O2G_BuyInstance::default_instance_ = new MSG_O2G_BuyInstance();
  MSG_O2G_BuyCoin::default_instance_ = new MSG_O2G_BuyCoin();
  MSG_O2G_Diamond::default_instance_ = new MSG_O2G_Diamond();
  MSG_O2G_Coin::default_instance_ = new MSG_O2G_Coin();
  INFO_ItemMes::default_instance_ = new INFO_ItemMes();
  INFO_Property::default_instance_ = new INFO_Property();
  INFO_HoleGem::default_instance_ = new INFO_HoleGem();
  INFO_Equipment::default_instance_ = new INFO_Equipment();
  MSG_O2G_Item::default_instance_ = new MSG_O2G_Item();
  MSG_O2G_Equip::default_instance_ = new MSG_O2G_Equip();
  MSG_O2G_Relive::default_instance_ = new MSG_O2G_Relive();
  MSG_O2G_Instance::default_instance_ = new MSG_O2G_Instance();
  MSG_O2G_Arena::default_instance_ = new MSG_O2G_Arena();
  MSG_C2G_HeartBeat::default_instance_->InitAsDefaultInstance();
  MSG_G2C_HeartBeat::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Deposit::default_instance_->InitAsDefaultInstance();
  MSG_O2G_AccountReg::default_instance_->InitAsDefaultInstance();
  MSG_O2G_RoleCreate::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Login::default_instance_->InitAsDefaultInstance();
  MSG_O2G_BagExtend::default_instance_->InitAsDefaultInstance();
  MSG_O2G_BuyInstance::default_instance_->InitAsDefaultInstance();
  MSG_O2G_BuyCoin::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Diamond::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Coin::default_instance_->InitAsDefaultInstance();
  INFO_ItemMes::default_instance_->InitAsDefaultInstance();
  INFO_Property::default_instance_->InitAsDefaultInstance();
  INFO_HoleGem::default_instance_->InitAsDefaultInstance();
  INFO_Equipment::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Item::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Equip::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Relive::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Instance::default_instance_->InitAsDefaultInstance();
  MSG_O2G_Arena::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gmsg_2eproto {
  StaticDescriptorInitializer_gmsg_2eproto() {
    protobuf_AddDesc_gmsg_2eproto();
  }
} static_descriptor_initializer_gmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MSG_C2G_HeartBeat::MSG_C2G_HeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_C2G_HeartBeat::InitAsDefaultInstance() {
}

MSG_C2G_HeartBeat::MSG_C2G_HeartBeat(const MSG_C2G_HeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_C2G_HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_C2G_HeartBeat::~MSG_C2G_HeartBeat() {
  SharedDtor();
}

void MSG_C2G_HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_C2G_HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_C2G_HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_C2G_HeartBeat_descriptor_;
}

const MSG_C2G_HeartBeat& MSG_C2G_HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_C2G_HeartBeat* MSG_C2G_HeartBeat::default_instance_ = NULL;

MSG_C2G_HeartBeat* MSG_C2G_HeartBeat::New() const {
  return new MSG_C2G_HeartBeat;
}

void MSG_C2G_HeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_C2G_HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MSG_C2G_HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_C2G_HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_C2G_HeartBeat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_C2G_HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_C2G_HeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_C2G_HeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_C2G_HeartBeat::MergeFrom(const MSG_C2G_HeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_C2G_HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_C2G_HeartBeat::CopyFrom(const MSG_C2G_HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_C2G_HeartBeat::IsInitialized() const {

  return true;
}

void MSG_C2G_HeartBeat::Swap(MSG_C2G_HeartBeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_C2G_HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_C2G_HeartBeat_descriptor_;
  metadata.reflection = MSG_C2G_HeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MSG_G2C_HeartBeat::MSG_G2C_HeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_G2C_HeartBeat::InitAsDefaultInstance() {
}

MSG_G2C_HeartBeat::MSG_G2C_HeartBeat(const MSG_G2C_HeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_G2C_HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_G2C_HeartBeat::~MSG_G2C_HeartBeat() {
  SharedDtor();
}

void MSG_G2C_HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_G2C_HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_G2C_HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_G2C_HeartBeat_descriptor_;
}

const MSG_G2C_HeartBeat& MSG_G2C_HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_G2C_HeartBeat* MSG_G2C_HeartBeat::default_instance_ = NULL;

MSG_G2C_HeartBeat* MSG_G2C_HeartBeat::New() const {
  return new MSG_G2C_HeartBeat;
}

void MSG_G2C_HeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_G2C_HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MSG_G2C_HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_G2C_HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_G2C_HeartBeat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_G2C_HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_G2C_HeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_G2C_HeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_G2C_HeartBeat::MergeFrom(const MSG_G2C_HeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_G2C_HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_G2C_HeartBeat::CopyFrom(const MSG_G2C_HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_G2C_HeartBeat::IsInitialized() const {

  return true;
}

void MSG_G2C_HeartBeat::Swap(MSG_G2C_HeartBeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_G2C_HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_G2C_HeartBeat_descriptor_;
  metadata.reflection = MSG_G2C_HeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Deposit::kPlatformFieldNumber;
const int MSG_O2G_Deposit::kAccountFieldNumber;
const int MSG_O2G_Deposit::kRoleidFieldNumber;
const int MSG_O2G_Deposit::kRolenameFieldNumber;
const int MSG_O2G_Deposit::kRolesnFieldNumber;
const int MSG_O2G_Deposit::kRolelevelFieldNumber;
const int MSG_O2G_Deposit::kViplevelFieldNumber;
const int MSG_O2G_Deposit::kTypeFieldNumber;
const int MSG_O2G_Deposit::kDiamondFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Deposit::MSG_O2G_Deposit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Deposit::InitAsDefaultInstance() {
}

MSG_O2G_Deposit::MSG_O2G_Deposit(const MSG_O2G_Deposit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Deposit::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolesn_ = 0;
  rolelevel_ = 0;
  viplevel_ = 0;
  type_ = 0;
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Deposit::~MSG_O2G_Deposit() {
  SharedDtor();
}

void MSG_O2G_Deposit::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_Deposit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Deposit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Deposit_descriptor_;
}

const MSG_O2G_Deposit& MSG_O2G_Deposit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Deposit* MSG_O2G_Deposit::default_instance_ = NULL;

MSG_O2G_Deposit* MSG_O2G_Deposit::New() const {
  return new MSG_O2G_Deposit;
}

void MSG_O2G_Deposit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolesn_ = 0;
    rolelevel_ = 0;
    viplevel_ = 0;
    type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    diamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Deposit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_account;
        break;
      }

      // required string account = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_rolename;
        break;
      }

      // required string rolename = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_rolesn;
        break;
      }

      // required int32 rolesn = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolesn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolesn_)));
          set_has_rolesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_viplevel;
        break;
      }

      // required int32 viplevel = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_type;
        break;
      }

      // required int32 type = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_diamond;
        break;
      }

      // required int32 diamond = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Deposit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->platform(), output);
  }

  // required string account = 20;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->account(), output);
  }

  // required int32 roleid = 30;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->roleid(), output);
  }

  // required string rolename = 40;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->rolename(), output);
  }

  // required int32 rolesn = 50;
  if (has_rolesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->rolesn(), output);
  }

  // required int32 rolelevel = 60;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->rolelevel(), output);
  }

  // required int32 viplevel = 70;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->viplevel(), output);
  }

  // required int32 type = 80;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->type(), output);
  }

  // required int32 diamond = 90;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Deposit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->platform(), target);
  }

  // required string account = 20;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->account(), target);
  }

  // required int32 roleid = 30;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->roleid(), target);
  }

  // required string rolename = 40;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->rolename(), target);
  }

  // required int32 rolesn = 50;
  if (has_rolesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->rolesn(), target);
  }

  // required int32 rolelevel = 60;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->rolelevel(), target);
  }

  // required int32 viplevel = 70;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->viplevel(), target);
  }

  // required int32 type = 80;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->type(), target);
  }

  // required int32 diamond = 90;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Deposit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string platform = 10;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // required string account = 20;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required int32 roleid = 30;
    if (has_roleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 40;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolesn = 50;
    if (has_rolesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolesn());
    }

    // required int32 rolelevel = 60;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // required int32 viplevel = 70;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // required int32 type = 80;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 diamond = 90;
    if (has_diamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Deposit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Deposit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Deposit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Deposit::MergeFrom(const MSG_O2G_Deposit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolesn()) {
      set_rolesn(from.rolesn());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Deposit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Deposit::CopyFrom(const MSG_O2G_Deposit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Deposit::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void MSG_O2G_Deposit::Swap(MSG_O2G_Deposit* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolesn_, other->rolesn_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(type_, other->type_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Deposit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Deposit_descriptor_;
  metadata.reflection = MSG_O2G_Deposit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_AccountReg::kPlatformFieldNumber;
const int MSG_O2G_AccountReg::kAccountFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_AccountReg::MSG_O2G_AccountReg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_AccountReg::InitAsDefaultInstance() {
}

MSG_O2G_AccountReg::MSG_O2G_AccountReg(const MSG_O2G_AccountReg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_AccountReg::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_AccountReg::~MSG_O2G_AccountReg() {
  SharedDtor();
}

void MSG_O2G_AccountReg::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_AccountReg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_AccountReg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_AccountReg_descriptor_;
}

const MSG_O2G_AccountReg& MSG_O2G_AccountReg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_AccountReg* MSG_O2G_AccountReg::default_instance_ = NULL;

MSG_O2G_AccountReg* MSG_O2G_AccountReg::New() const {
  return new MSG_O2G_AccountReg;
}

void MSG_O2G_AccountReg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_AccountReg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_account;
        break;
      }

      // required string account = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_AccountReg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->platform(), output);
  }

  // required string account = 20;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_AccountReg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->platform(), target);
  }

  // required string account = 20;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_AccountReg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string platform = 10;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // required string account = 20;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_AccountReg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_AccountReg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_AccountReg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_AccountReg::MergeFrom(const MSG_O2G_AccountReg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_AccountReg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_AccountReg::CopyFrom(const MSG_O2G_AccountReg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_AccountReg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSG_O2G_AccountReg::Swap(MSG_O2G_AccountReg* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_AccountReg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_AccountReg_descriptor_;
  metadata.reflection = MSG_O2G_AccountReg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_RoleCreate::kPlatformFieldNumber;
const int MSG_O2G_RoleCreate::kAccountFieldNumber;
const int MSG_O2G_RoleCreate::kRolesnFieldNumber;
const int MSG_O2G_RoleCreate::kRolenameFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_RoleCreate::MSG_O2G_RoleCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_RoleCreate::InitAsDefaultInstance() {
}

MSG_O2G_RoleCreate::MSG_O2G_RoleCreate(const MSG_O2G_RoleCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_RoleCreate::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolesn_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_RoleCreate::~MSG_O2G_RoleCreate() {
  SharedDtor();
}

void MSG_O2G_RoleCreate::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_RoleCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_RoleCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_RoleCreate_descriptor_;
}

const MSG_O2G_RoleCreate& MSG_O2G_RoleCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_RoleCreate* MSG_O2G_RoleCreate::default_instance_ = NULL;

MSG_O2G_RoleCreate* MSG_O2G_RoleCreate::New() const {
  return new MSG_O2G_RoleCreate;
}

void MSG_O2G_RoleCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    rolesn_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_RoleCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_account;
        break;
      }

      // required string account = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rolesn;
        break;
      }

      // required int32 rolesn = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolesn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolesn_)));
          set_has_rolesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_rolename;
        break;
      }

      // required string rolename = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_RoleCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->platform(), output);
  }

  // required string account = 20;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->account(), output);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rolesn(), output);
  }

  // required string rolename = 40;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_RoleCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->platform(), target);
  }

  // required string account = 20;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->account(), target);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rolesn(), target);
  }

  // required string rolename = 40;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_RoleCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string platform = 10;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // required string account = 20;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required int32 rolesn = 30;
    if (has_rolesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolesn());
    }

    // required string rolename = 40;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_RoleCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_RoleCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_RoleCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_RoleCreate::MergeFrom(const MSG_O2G_RoleCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_rolesn()) {
      set_rolesn(from.rolesn());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_RoleCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_RoleCreate::CopyFrom(const MSG_O2G_RoleCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_RoleCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MSG_O2G_RoleCreate::Swap(MSG_O2G_RoleCreate* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(rolesn_, other->rolesn_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_RoleCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_RoleCreate_descriptor_;
  metadata.reflection = MSG_O2G_RoleCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Login::kPlatformFieldNumber;
const int MSG_O2G_Login::kAccountFieldNumber;
const int MSG_O2G_Login::kRolesnFieldNumber;
const int MSG_O2G_Login::kRolelevelFieldNumber;
const int MSG_O2G_Login::kRolenameFieldNumber;
const int MSG_O2G_Login::kOnlinetimeFieldNumber;
const int MSG_O2G_Login::kOfflinetimeFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Login::MSG_O2G_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Login::InitAsDefaultInstance() {
}

MSG_O2G_Login::MSG_O2G_Login(const MSG_O2G_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Login::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolesn_ = 0;
  rolelevel_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onlinetime_ = 0;
  offlinetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Login::~MSG_O2G_Login() {
  SharedDtor();
}

void MSG_O2G_Login::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Login_descriptor_;
}

const MSG_O2G_Login& MSG_O2G_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Login* MSG_O2G_Login::default_instance_ = NULL;

MSG_O2G_Login* MSG_O2G_Login::New() const {
  return new MSG_O2G_Login;
}

void MSG_O2G_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    rolesn_ = 0;
    rolelevel_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    onlinetime_ = 0;
    offlinetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_account;
        break;
      }

      // required string account = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rolesn;
        break;
      }

      // required int32 rolesn = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolesn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolesn_)));
          set_has_rolesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_rolename;
        break;
      }

      // required string rolename = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_onlinetime;
        break;
      }

      // required int32 onlinetime = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_offlinetime;
        break;
      }

      // required int32 offlinetime = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->platform(), output);
  }

  // required string account = 20;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->account(), output);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rolesn(), output);
  }

  // required int32 rolelevel = 35;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->rolelevel(), output);
  }

  // required string rolename = 40;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->rolename(), output);
  }

  // required int32 onlinetime = 50;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->onlinetime(), output);
  }

  // required int32 offlinetime = 60;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->offlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->platform(), target);
  }

  // required string account = 20;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->account(), target);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rolesn(), target);
  }

  // required int32 rolelevel = 35;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->rolelevel(), target);
  }

  // required string rolename = 40;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->rolename(), target);
  }

  // required int32 onlinetime = 50;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->onlinetime(), target);
  }

  // required int32 offlinetime = 60;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->offlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string platform = 10;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // required string account = 20;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required int32 rolesn = 30;
    if (has_rolesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolesn());
    }

    // required int32 rolelevel = 35;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // required string rolename = 40;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 onlinetime = 50;
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinetime());
    }

    // required int32 offlinetime = 60;
    if (has_offlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Login::MergeFrom(const MSG_O2G_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_rolesn()) {
      set_rolesn(from.rolesn());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Login::CopyFrom(const MSG_O2G_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MSG_O2G_Login::Swap(MSG_O2G_Login* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(rolesn_, other->rolesn_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(rolename_, other->rolename_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Login_descriptor_;
  metadata.reflection = MSG_O2G_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_BagExtend::kRoleidFieldNumber;
const int MSG_O2G_BagExtend::kRolenameFieldNumber;
const int MSG_O2G_BagExtend::kRolesnFieldNumber;
const int MSG_O2G_BagExtend::kTypeFieldNumber;
const int MSG_O2G_BagExtend::kExtendnumFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_BagExtend::MSG_O2G_BagExtend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_BagExtend::InitAsDefaultInstance() {
}

MSG_O2G_BagExtend::MSG_O2G_BagExtend(const MSG_O2G_BagExtend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_BagExtend::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolesn_ = 0;
  type_ = 0;
  extendnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_BagExtend::~MSG_O2G_BagExtend() {
  SharedDtor();
}

void MSG_O2G_BagExtend::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_BagExtend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_BagExtend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_BagExtend_descriptor_;
}

const MSG_O2G_BagExtend& MSG_O2G_BagExtend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_BagExtend* MSG_O2G_BagExtend::default_instance_ = NULL;

MSG_O2G_BagExtend* MSG_O2G_BagExtend::New() const {
  return new MSG_O2G_BagExtend;
}

void MSG_O2G_BagExtend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolesn_ = 0;
    type_ = 0;
    extendnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_BagExtend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_rolename;
        break;
      }

      // required string rolename = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rolesn;
        break;
      }

      // required int32 rolesn = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolesn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolesn_)));
          set_has_rolesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_type;
        break;
      }

      // required int32 type = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_extendnum;
        break;
      }

      // required int32 extendnum = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extendnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extendnum_)));
          set_has_extendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_BagExtend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleid(), output);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rolename(), output);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rolesn(), output);
  }

  // required int32 type = 40;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->type(), output);
  }

  // required int32 extendnum = 50;
  if (has_extendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->extendnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_BagExtend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleid(), target);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->rolename(), target);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rolesn(), target);
  }

  // required int32 type = 40;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->type(), target);
  }

  // required int32 extendnum = 50;
  if (has_extendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->extendnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_BagExtend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 10;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 20;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolesn = 30;
    if (has_rolesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolesn());
    }

    // required int32 type = 40;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 extendnum = 50;
    if (has_extendnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extendnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_BagExtend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_BagExtend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_BagExtend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_BagExtend::MergeFrom(const MSG_O2G_BagExtend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolesn()) {
      set_rolesn(from.rolesn());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_extendnum()) {
      set_extendnum(from.extendnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_BagExtend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_BagExtend::CopyFrom(const MSG_O2G_BagExtend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_BagExtend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MSG_O2G_BagExtend::Swap(MSG_O2G_BagExtend* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolesn_, other->rolesn_);
    std::swap(type_, other->type_);
    std::swap(extendnum_, other->extendnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_BagExtend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_BagExtend_descriptor_;
  metadata.reflection = MSG_O2G_BagExtend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_BuyInstance::kRoleidFieldNumber;
const int MSG_O2G_BuyInstance::kRolenameFieldNumber;
const int MSG_O2G_BuyInstance::kRolesnFieldNumber;
const int MSG_O2G_BuyInstance::kRolelevelFieldNumber;
const int MSG_O2G_BuyInstance::kViplevelFieldNumber;
const int MSG_O2G_BuyInstance::kInstancesnFieldNumber;
const int MSG_O2G_BuyInstance::kBuycountFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_BuyInstance::MSG_O2G_BuyInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_BuyInstance::InitAsDefaultInstance() {
}

MSG_O2G_BuyInstance::MSG_O2G_BuyInstance(const MSG_O2G_BuyInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_BuyInstance::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolesn_ = 0;
  rolelevel_ = 0;
  viplevel_ = 0;
  instancesn_ = 0;
  buycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_BuyInstance::~MSG_O2G_BuyInstance() {
  SharedDtor();
}

void MSG_O2G_BuyInstance::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_BuyInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_BuyInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_BuyInstance_descriptor_;
}

const MSG_O2G_BuyInstance& MSG_O2G_BuyInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_BuyInstance* MSG_O2G_BuyInstance::default_instance_ = NULL;

MSG_O2G_BuyInstance* MSG_O2G_BuyInstance::New() const {
  return new MSG_O2G_BuyInstance;
}

void MSG_O2G_BuyInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolesn_ = 0;
    rolelevel_ = 0;
    viplevel_ = 0;
    instancesn_ = 0;
    buycount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_BuyInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_rolename;
        break;
      }

      // required string rolename = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rolesn;
        break;
      }

      // required int32 rolesn = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolesn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolesn_)));
          set_has_rolesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_viplevel;
        break;
      }

      // required int32 viplevel = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_instancesn;
        break;
      }

      // required int32 instancesn = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instancesn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancesn_)));
          set_has_instancesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_buycount;
        break;
      }

      // required int32 buycount = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_BuyInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleid(), output);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rolename(), output);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rolesn(), output);
  }

  // required int32 rolelevel = 40;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->rolelevel(), output);
  }

  // required int32 viplevel = 50;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->viplevel(), output);
  }

  // required int32 instancesn = 60;
  if (has_instancesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->instancesn(), output);
  }

  // required int32 buycount = 70;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->buycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_BuyInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleid(), target);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->rolename(), target);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rolesn(), target);
  }

  // required int32 rolelevel = 40;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->rolelevel(), target);
  }

  // required int32 viplevel = 50;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->viplevel(), target);
  }

  // required int32 instancesn = 60;
  if (has_instancesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->instancesn(), target);
  }

  // required int32 buycount = 70;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->buycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_BuyInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 10;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 20;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolesn = 30;
    if (has_rolesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolesn());
    }

    // required int32 rolelevel = 40;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // required int32 viplevel = 50;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // required int32 instancesn = 60;
    if (has_instancesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancesn());
    }

    // required int32 buycount = 70;
    if (has_buycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_BuyInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_BuyInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_BuyInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_BuyInstance::MergeFrom(const MSG_O2G_BuyInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolesn()) {
      set_rolesn(from.rolesn());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_instancesn()) {
      set_instancesn(from.instancesn());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_BuyInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_BuyInstance::CopyFrom(const MSG_O2G_BuyInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_BuyInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MSG_O2G_BuyInstance::Swap(MSG_O2G_BuyInstance* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolesn_, other->rolesn_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(instancesn_, other->instancesn_);
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_BuyInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_BuyInstance_descriptor_;
  metadata.reflection = MSG_O2G_BuyInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_BuyCoin::kRoleidFieldNumber;
const int MSG_O2G_BuyCoin::kRolenameFieldNumber;
const int MSG_O2G_BuyCoin::kRolesnFieldNumber;
const int MSG_O2G_BuyCoin::kRolelevelFieldNumber;
const int MSG_O2G_BuyCoin::kViplevelFieldNumber;
const int MSG_O2G_BuyCoin::kSpenddiamondFieldNumber;
const int MSG_O2G_BuyCoin::kCoinFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_BuyCoin::MSG_O2G_BuyCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_BuyCoin::InitAsDefaultInstance() {
}

MSG_O2G_BuyCoin::MSG_O2G_BuyCoin(const MSG_O2G_BuyCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_BuyCoin::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolesn_ = 0;
  rolelevel_ = 0;
  viplevel_ = 0;
  spenddiamond_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_BuyCoin::~MSG_O2G_BuyCoin() {
  SharedDtor();
}

void MSG_O2G_BuyCoin::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_BuyCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_BuyCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_BuyCoin_descriptor_;
}

const MSG_O2G_BuyCoin& MSG_O2G_BuyCoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_BuyCoin* MSG_O2G_BuyCoin::default_instance_ = NULL;

MSG_O2G_BuyCoin* MSG_O2G_BuyCoin::New() const {
  return new MSG_O2G_BuyCoin;
}

void MSG_O2G_BuyCoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolesn_ = 0;
    rolelevel_ = 0;
    viplevel_ = 0;
    spenddiamond_ = 0;
    coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_BuyCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_rolename;
        break;
      }

      // required string rolename = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rolesn;
        break;
      }

      // required int32 rolesn = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolesn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolesn_)));
          set_has_rolesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_viplevel;
        break;
      }

      // required int32 viplevel = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_spenddiamond;
        break;
      }

      // required int32 spenddiamond = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spenddiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spenddiamond_)));
          set_has_spenddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_coin;
        break;
      }

      // required int32 coin = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_BuyCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleid(), output);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rolename(), output);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rolesn(), output);
  }

  // required int32 rolelevel = 40;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->rolelevel(), output);
  }

  // required int32 viplevel = 50;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->viplevel(), output);
  }

  // required int32 spenddiamond = 60;
  if (has_spenddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->spenddiamond(), output);
  }

  // required int32 coin = 70;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_BuyCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleid(), target);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->rolename(), target);
  }

  // required int32 rolesn = 30;
  if (has_rolesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rolesn(), target);
  }

  // required int32 rolelevel = 40;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->rolelevel(), target);
  }

  // required int32 viplevel = 50;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->viplevel(), target);
  }

  // required int32 spenddiamond = 60;
  if (has_spenddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->spenddiamond(), target);
  }

  // required int32 coin = 70;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_BuyCoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 10;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 20;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolesn = 30;
    if (has_rolesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolesn());
    }

    // required int32 rolelevel = 40;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // required int32 viplevel = 50;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // required int32 spenddiamond = 60;
    if (has_spenddiamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spenddiamond());
    }

    // required int32 coin = 70;
    if (has_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_BuyCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_BuyCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_BuyCoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_BuyCoin::MergeFrom(const MSG_O2G_BuyCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolesn()) {
      set_rolesn(from.rolesn());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_spenddiamond()) {
      set_spenddiamond(from.spenddiamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_BuyCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_BuyCoin::CopyFrom(const MSG_O2G_BuyCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_BuyCoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MSG_O2G_BuyCoin::Swap(MSG_O2G_BuyCoin* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolesn_, other->rolesn_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(spenddiamond_, other->spenddiamond_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_BuyCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_BuyCoin_descriptor_;
  metadata.reflection = MSG_O2G_BuyCoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Diamond::kAccountFieldNumber;
const int MSG_O2G_Diamond::kRoleidFieldNumber;
const int MSG_O2G_Diamond::kRolenameFieldNumber;
const int MSG_O2G_Diamond::kRolelevelFieldNumber;
const int MSG_O2G_Diamond::kTypeFieldNumber;
const int MSG_O2G_Diamond::kSubtypeFieldNumber;
const int MSG_O2G_Diamond::kChangediamondFieldNumber;
const int MSG_O2G_Diamond::kTotaldiamondFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Diamond::MSG_O2G_Diamond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Diamond::InitAsDefaultInstance() {
}

MSG_O2G_Diamond::MSG_O2G_Diamond(const MSG_O2G_Diamond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Diamond::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelevel_ = 0;
  type_ = 0;
  subtype_ = 0;
  changediamond_ = 0;
  totaldiamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Diamond::~MSG_O2G_Diamond() {
  SharedDtor();
}

void MSG_O2G_Diamond::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_Diamond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Diamond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Diamond_descriptor_;
}

const MSG_O2G_Diamond& MSG_O2G_Diamond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Diamond* MSG_O2G_Diamond::default_instance_ = NULL;

MSG_O2G_Diamond* MSG_O2G_Diamond::New() const {
  return new MSG_O2G_Diamond;
}

void MSG_O2G_Diamond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelevel_ = 0;
    type_ = 0;
    subtype_ = 0;
    changediamond_ = 0;
    totaldiamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Diamond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_rolename;
        break;
      }

      // required string rolename = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_type;
        break;
      }

      // required int32 type = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_subtype;
        break;
      }

      // required int32 subtype = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_changediamond;
        break;
      }

      // required int32 changediamond = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changediamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changediamond_)));
          set_has_changediamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_totaldiamond;
        break;
      }

      // required int32 totaldiamond = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totaldiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldiamond_)));
          set_has_totaldiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Diamond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->account(), output);
  }

  // required int32 roleid = 20;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->roleid(), output);
  }

  // required string rolename = 30;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->rolename(), output);
  }

  // required int32 rolelevel = 40;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->rolelevel(), output);
  }

  // required int32 type = 50;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->type(), output);
  }

  // required int32 subtype = 60;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->subtype(), output);
  }

  // required int32 changediamond = 70;
  if (has_changediamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->changediamond(), output);
  }

  // required int32 totaldiamond = 80;
  if (has_totaldiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->totaldiamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Diamond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->account(), target);
  }

  // required int32 roleid = 20;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->roleid(), target);
  }

  // required string rolename = 30;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->rolename(), target);
  }

  // required int32 rolelevel = 40;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->rolelevel(), target);
  }

  // required int32 type = 50;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->type(), target);
  }

  // required int32 subtype = 60;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->subtype(), target);
  }

  // required int32 changediamond = 70;
  if (has_changediamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->changediamond(), target);
  }

  // required int32 totaldiamond = 80;
  if (has_totaldiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->totaldiamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Diamond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 10;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required int32 roleid = 20;
    if (has_roleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 30;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolelevel = 40;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // required int32 type = 50;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 subtype = 60;
    if (has_subtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // required int32 changediamond = 70;
    if (has_changediamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changediamond());
    }

    // required int32 totaldiamond = 80;
    if (has_totaldiamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldiamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Diamond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Diamond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Diamond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Diamond::MergeFrom(const MSG_O2G_Diamond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_changediamond()) {
      set_changediamond(from.changediamond());
    }
    if (from.has_totaldiamond()) {
      set_totaldiamond(from.totaldiamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Diamond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Diamond::CopyFrom(const MSG_O2G_Diamond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Diamond::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void MSG_O2G_Diamond::Swap(MSG_O2G_Diamond* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(type_, other->type_);
    std::swap(subtype_, other->subtype_);
    std::swap(changediamond_, other->changediamond_);
    std::swap(totaldiamond_, other->totaldiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Diamond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Diamond_descriptor_;
  metadata.reflection = MSG_O2G_Diamond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Coin::kRoleidFieldNumber;
const int MSG_O2G_Coin::kRolenameFieldNumber;
const int MSG_O2G_Coin::kRolelevelFieldNumber;
const int MSG_O2G_Coin::kTypeFieldNumber;
const int MSG_O2G_Coin::kSubtypeFieldNumber;
const int MSG_O2G_Coin::kChangecoinFieldNumber;
const int MSG_O2G_Coin::kTotalcoinFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Coin::MSG_O2G_Coin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Coin::InitAsDefaultInstance() {
}

MSG_O2G_Coin::MSG_O2G_Coin(const MSG_O2G_Coin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Coin::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelevel_ = 0;
  type_ = 0;
  subtype_ = 0;
  changecoin_ = 0;
  totalcoin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Coin::~MSG_O2G_Coin() {
  SharedDtor();
}

void MSG_O2G_Coin::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_Coin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Coin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Coin_descriptor_;
}

const MSG_O2G_Coin& MSG_O2G_Coin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Coin* MSG_O2G_Coin::default_instance_ = NULL;

MSG_O2G_Coin* MSG_O2G_Coin::New() const {
  return new MSG_O2G_Coin;
}

void MSG_O2G_Coin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelevel_ = 0;
    type_ = 0;
    subtype_ = 0;
    changecoin_ = 0;
    totalcoin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Coin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_rolename;
        break;
      }

      // required string rolename = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_type;
        break;
      }

      // required int32 type = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_subtype;
        break;
      }

      // required int32 subtype = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_changecoin;
        break;
      }

      // required int32 changecoin = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changecoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changecoin_)));
          set_has_changecoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_totalcoin;
        break;
      }

      // required int32 totalcoin = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcoin_)));
          set_has_totalcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Coin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleid(), output);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rolename(), output);
  }

  // required int32 rolelevel = 30;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rolelevel(), output);
  }

  // required int32 type = 40;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->type(), output);
  }

  // required int32 subtype = 50;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->subtype(), output);
  }

  // required int32 changecoin = 60;
  if (has_changecoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->changecoin(), output);
  }

  // required int32 totalcoin = 70;
  if (has_totalcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->totalcoin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Coin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleid(), target);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->rolename(), target);
  }

  // required int32 rolelevel = 30;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rolelevel(), target);
  }

  // required int32 type = 40;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->type(), target);
  }

  // required int32 subtype = 50;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->subtype(), target);
  }

  // required int32 changecoin = 60;
  if (has_changecoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->changecoin(), target);
  }

  // required int32 totalcoin = 70;
  if (has_totalcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->totalcoin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Coin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 10;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 20;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolelevel = 30;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // required int32 type = 40;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 subtype = 50;
    if (has_subtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // required int32 changecoin = 60;
    if (has_changecoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changecoin());
    }

    // required int32 totalcoin = 70;
    if (has_totalcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcoin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Coin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Coin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Coin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Coin::MergeFrom(const MSG_O2G_Coin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_changecoin()) {
      set_changecoin(from.changecoin());
    }
    if (from.has_totalcoin()) {
      set_totalcoin(from.totalcoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Coin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Coin::CopyFrom(const MSG_O2G_Coin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Coin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MSG_O2G_Coin::Swap(MSG_O2G_Coin* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(type_, other->type_);
    std::swap(subtype_, other->subtype_);
    std::swap(changecoin_, other->changecoin_);
    std::swap(totalcoin_, other->totalcoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Coin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Coin_descriptor_;
  metadata.reflection = MSG_O2G_Coin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int INFO_ItemMes::kIdFieldNumber;
const int INFO_ItemMes::kNumFieldNumber;
const int INFO_ItemMes::kItemsnFieldNumber;
#endif  // !_MSC_VER

INFO_ItemMes::INFO_ItemMes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void INFO_ItemMes::InitAsDefaultInstance() {
}

INFO_ItemMes::INFO_ItemMes(const INFO_ItemMes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void INFO_ItemMes::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  itemsn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INFO_ItemMes::~INFO_ItemMes() {
  SharedDtor();
}

void INFO_ItemMes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void INFO_ItemMes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INFO_ItemMes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INFO_ItemMes_descriptor_;
}

const INFO_ItemMes& INFO_ItemMes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

INFO_ItemMes* INFO_ItemMes::default_instance_ = NULL;

INFO_ItemMes* INFO_ItemMes::New() const {
  return new INFO_ItemMes;
}

void INFO_ItemMes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    itemsn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INFO_ItemMes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemsn;
        break;
      }

      // required int32 itemsn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void INFO_ItemMes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // required int32 itemsn = 3;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemsn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* INFO_ItemMes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // required int32 itemsn = 3;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemsn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int INFO_ItemMes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 itemsn = 3;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemsn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INFO_ItemMes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INFO_ItemMes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INFO_ItemMes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INFO_ItemMes::MergeFrom(const INFO_ItemMes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INFO_ItemMes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INFO_ItemMes::CopyFrom(const INFO_ItemMes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INFO_ItemMes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void INFO_ItemMes::Swap(INFO_ItemMes* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(itemsn_, other->itemsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INFO_ItemMes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INFO_ItemMes_descriptor_;
  metadata.reflection = INFO_ItemMes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int INFO_Property::kPropertytypeFieldNumber;
const int INFO_Property::kPropertyvalFieldNumber;
#endif  // !_MSC_VER

INFO_Property::INFO_Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void INFO_Property::InitAsDefaultInstance() {
}

INFO_Property::INFO_Property(const INFO_Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void INFO_Property::SharedCtor() {
  _cached_size_ = 0;
  propertytype_ = 0;
  propertyval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INFO_Property::~INFO_Property() {
  SharedDtor();
}

void INFO_Property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void INFO_Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INFO_Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INFO_Property_descriptor_;
}

const INFO_Property& INFO_Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

INFO_Property* INFO_Property::default_instance_ = NULL;

INFO_Property* INFO_Property::New() const {
  return new INFO_Property;
}

void INFO_Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propertytype_ = 0;
    propertyval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INFO_Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 propertytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertytype_)));
          set_has_propertytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propertyval;
        break;
      }

      // required int32 propertyval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyval_)));
          set_has_propertyval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void INFO_Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 propertytype = 1;
  if (has_propertytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propertytype(), output);
  }

  // required int32 propertyval = 2;
  if (has_propertyval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propertyval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* INFO_Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 propertytype = 1;
  if (has_propertytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propertytype(), target);
  }

  // required int32 propertyval = 2;
  if (has_propertyval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propertyval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int INFO_Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 propertytype = 1;
    if (has_propertytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertytype());
    }

    // required int32 propertyval = 2;
    if (has_propertyval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INFO_Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INFO_Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INFO_Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INFO_Property::MergeFrom(const INFO_Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propertytype()) {
      set_propertytype(from.propertytype());
    }
    if (from.has_propertyval()) {
      set_propertyval(from.propertyval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INFO_Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INFO_Property::CopyFrom(const INFO_Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INFO_Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void INFO_Property::Swap(INFO_Property* other) {
  if (other != this) {
    std::swap(propertytype_, other->propertytype_);
    std::swap(propertyval_, other->propertyval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INFO_Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INFO_Property_descriptor_;
  metadata.reflection = INFO_Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int INFO_HoleGem::kHoleidFieldNumber;
const int INFO_HoleGem::kGemsnFieldNumber;
#endif  // !_MSC_VER

INFO_HoleGem::INFO_HoleGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void INFO_HoleGem::InitAsDefaultInstance() {
}

INFO_HoleGem::INFO_HoleGem(const INFO_HoleGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void INFO_HoleGem::SharedCtor() {
  _cached_size_ = 0;
  holeid_ = 0;
  gemsn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INFO_HoleGem::~INFO_HoleGem() {
  SharedDtor();
}

void INFO_HoleGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void INFO_HoleGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INFO_HoleGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INFO_HoleGem_descriptor_;
}

const INFO_HoleGem& INFO_HoleGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

INFO_HoleGem* INFO_HoleGem::default_instance_ = NULL;

INFO_HoleGem* INFO_HoleGem::New() const {
  return new INFO_HoleGem;
}

void INFO_HoleGem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    holeid_ = 0;
    gemsn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INFO_HoleGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 holeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holeid_)));
          set_has_holeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gemsn;
        break;
      }

      // required int32 gemsn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemsn_)));
          set_has_gemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void INFO_HoleGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 holeid = 1;
  if (has_holeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->holeid(), output);
  }

  // required int32 gemsn = 2;
  if (has_gemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gemsn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* INFO_HoleGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 holeid = 1;
  if (has_holeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->holeid(), target);
  }

  // required int32 gemsn = 2;
  if (has_gemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gemsn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int INFO_HoleGem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 holeid = 1;
    if (has_holeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holeid());
    }

    // required int32 gemsn = 2;
    if (has_gemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemsn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INFO_HoleGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INFO_HoleGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INFO_HoleGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INFO_HoleGem::MergeFrom(const INFO_HoleGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_holeid()) {
      set_holeid(from.holeid());
    }
    if (from.has_gemsn()) {
      set_gemsn(from.gemsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INFO_HoleGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INFO_HoleGem::CopyFrom(const INFO_HoleGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INFO_HoleGem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void INFO_HoleGem::Swap(INFO_HoleGem* other) {
  if (other != this) {
    std::swap(holeid_, other->holeid_);
    std::swap(gemsn_, other->gemsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INFO_HoleGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INFO_HoleGem_descriptor_;
  metadata.reflection = INFO_HoleGem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int INFO_Equipment::kBasemesFieldNumber;
const int INFO_Equipment::kStrelevelFieldNumber;
const int INFO_Equipment::kBaseproptyFieldNumber;
const int INFO_Equipment::kAddtionalFieldNumber;
const int INFO_Equipment::kHolegemFieldNumber;
const int INFO_Equipment::kCurholenumFieldNumber;
#endif  // !_MSC_VER

INFO_Equipment::INFO_Equipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void INFO_Equipment::InitAsDefaultInstance() {
  basemes_ = const_cast< ::gproto::gather::INFO_ItemMes*>(&::gproto::gather::INFO_ItemMes::default_instance());
}

INFO_Equipment::INFO_Equipment(const INFO_Equipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void INFO_Equipment::SharedCtor() {
  _cached_size_ = 0;
  basemes_ = NULL;
  strelevel_ = 0;
  curholenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INFO_Equipment::~INFO_Equipment() {
  SharedDtor();
}

void INFO_Equipment::SharedDtor() {
  if (this != default_instance_) {
    delete basemes_;
  }
}

void INFO_Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INFO_Equipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INFO_Equipment_descriptor_;
}

const INFO_Equipment& INFO_Equipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

INFO_Equipment* INFO_Equipment::default_instance_ = NULL;

INFO_Equipment* INFO_Equipment::New() const {
  return new INFO_Equipment;
}

void INFO_Equipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basemes()) {
      if (basemes_ != NULL) basemes_->::gproto::gather::INFO_ItemMes::Clear();
    }
    strelevel_ = 0;
    curholenum_ = 0;
  }
  basepropty_.Clear();
  addtional_.Clear();
  holegem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INFO_Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gproto.gather.INFO_ItemMes basemes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basemes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strelevel;
        break;
      }

      // required int32 strelevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strelevel_)));
          set_has_strelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_basepropty;
        break;
      }

      // repeated int32 basepropty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basepropty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_basepropty())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_basepropty())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_basepropty;
        if (input->ExpectTag(34)) goto parse_addtional;
        break;
      }

      // repeated .gproto.gather.INFO_Property addtional = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addtional:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addtional()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_addtional;
        if (input->ExpectTag(42)) goto parse_holegem;
        break;
      }

      // repeated .gproto.gather.INFO_HoleGem holegem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_holegem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_holegem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_holegem;
        if (input->ExpectTag(48)) goto parse_curholenum;
        break;
      }

      // required int32 curholenum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curholenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curholenum_)));
          set_has_curholenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void INFO_Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gproto.gather.INFO_ItemMes basemes = 1;
  if (has_basemes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basemes(), output);
  }

  // required int32 strelevel = 2;
  if (has_strelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->strelevel(), output);
  }

  // repeated int32 basepropty = 3;
  for (int i = 0; i < this->basepropty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->basepropty(i), output);
  }

  // repeated .gproto.gather.INFO_Property addtional = 4;
  for (int i = 0; i < this->addtional_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->addtional(i), output);
  }

  // repeated .gproto.gather.INFO_HoleGem holegem = 5;
  for (int i = 0; i < this->holegem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->holegem(i), output);
  }

  // required int32 curholenum = 6;
  if (has_curholenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curholenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* INFO_Equipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gproto.gather.INFO_ItemMes basemes = 1;
  if (has_basemes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basemes(), target);
  }

  // required int32 strelevel = 2;
  if (has_strelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->strelevel(), target);
  }

  // repeated int32 basepropty = 3;
  for (int i = 0; i < this->basepropty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->basepropty(i), target);
  }

  // repeated .gproto.gather.INFO_Property addtional = 4;
  for (int i = 0; i < this->addtional_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->addtional(i), target);
  }

  // repeated .gproto.gather.INFO_HoleGem holegem = 5;
  for (int i = 0; i < this->holegem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->holegem(i), target);
  }

  // required int32 curholenum = 6;
  if (has_curholenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curholenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int INFO_Equipment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gproto.gather.INFO_ItemMes basemes = 1;
    if (has_basemes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basemes());
    }

    // required int32 strelevel = 2;
    if (has_strelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strelevel());
    }

    // required int32 curholenum = 6;
    if (has_curholenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curholenum());
    }

  }
  // repeated int32 basepropty = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->basepropty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->basepropty(i));
    }
    total_size += 1 * this->basepropty_size() + data_size;
  }

  // repeated .gproto.gather.INFO_Property addtional = 4;
  total_size += 1 * this->addtional_size();
  for (int i = 0; i < this->addtional_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addtional(i));
  }

  // repeated .gproto.gather.INFO_HoleGem holegem = 5;
  total_size += 1 * this->holegem_size();
  for (int i = 0; i < this->holegem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->holegem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INFO_Equipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INFO_Equipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INFO_Equipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INFO_Equipment::MergeFrom(const INFO_Equipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  basepropty_.MergeFrom(from.basepropty_);
  addtional_.MergeFrom(from.addtional_);
  holegem_.MergeFrom(from.holegem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basemes()) {
      mutable_basemes()->::gproto::gather::INFO_ItemMes::MergeFrom(from.basemes());
    }
    if (from.has_strelevel()) {
      set_strelevel(from.strelevel());
    }
    if (from.has_curholenum()) {
      set_curholenum(from.curholenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INFO_Equipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INFO_Equipment::CopyFrom(const INFO_Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INFO_Equipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;

  if (has_basemes()) {
    if (!this->basemes().IsInitialized()) return false;
  }
  for (int i = 0; i < addtional_size(); i++) {
    if (!this->addtional(i).IsInitialized()) return false;
  }
  for (int i = 0; i < holegem_size(); i++) {
    if (!this->holegem(i).IsInitialized()) return false;
  }
  return true;
}

void INFO_Equipment::Swap(INFO_Equipment* other) {
  if (other != this) {
    std::swap(basemes_, other->basemes_);
    std::swap(strelevel_, other->strelevel_);
    basepropty_.Swap(&other->basepropty_);
    addtional_.Swap(&other->addtional_);
    holegem_.Swap(&other->holegem_);
    std::swap(curholenum_, other->curholenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INFO_Equipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INFO_Equipment_descriptor_;
  metadata.reflection = INFO_Equipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Item::kItemsnFieldNumber;
const int MSG_O2G_Item::kItemtypeFieldNumber;
const int MSG_O2G_Item::kNumFieldNumber;
const int MSG_O2G_Item::kTypeFieldNumber;
const int MSG_O2G_Item::kWayFieldNumber;
const int MSG_O2G_Item::kRoleidFieldNumber;
const int MSG_O2G_Item::kRolenameFieldNumber;
const int MSG_O2G_Item::kRolelevelFieldNumber;
const int MSG_O2G_Item::kEquipFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Item::MSG_O2G_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Item::InitAsDefaultInstance() {
  equip_ = const_cast< ::gproto::gather::INFO_Equipment*>(&::gproto::gather::INFO_Equipment::default_instance());
}

MSG_O2G_Item::MSG_O2G_Item(const MSG_O2G_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Item::SharedCtor() {
  _cached_size_ = 0;
  itemsn_ = 0;
  itemtype_ = 0;
  num_ = 0;
  type_ = 0;
  way_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelevel_ = 0;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Item::~MSG_O2G_Item() {
  SharedDtor();
}

void MSG_O2G_Item::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete equip_;
  }
}

void MSG_O2G_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Item_descriptor_;
}

const MSG_O2G_Item& MSG_O2G_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Item* MSG_O2G_Item::default_instance_ = NULL;

MSG_O2G_Item* MSG_O2G_Item::New() const {
  return new MSG_O2G_Item;
}

void MSG_O2G_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsn_ = 0;
    itemtype_ = 0;
    num_ = 0;
    type_ = 0;
    way_ = 0;
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_equip()) {
      if (equip_ != NULL) equip_->::gproto::gather::INFO_Equipment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemsn = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_itemtype;
        break;
      }

      // required int32 itemtype = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_num;
        break;
      }

      // required int32 num = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_type;
        break;
      }

      // required int32 type = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_way;
        break;
      }

      // required int32 way = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &way_)));
          set_has_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_rolename;
        break;
      }

      // required string rolename = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_equip;
        break;
      }

      // optional .gproto.gather.INFO_Equipment equip = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemsn = 10;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->itemsn(), output);
  }

  // required int32 itemtype = 20;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->itemtype(), output);
  }

  // required int32 num = 30;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->num(), output);
  }

  // required int32 type = 40;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->type(), output);
  }

  // required int32 way = 50;
  if (has_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->way(), output);
  }

  // required int32 roleid = 60;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->roleid(), output);
  }

  // required string rolename = 70;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      70, this->rolename(), output);
  }

  // required int32 rolelevel = 80;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->rolelevel(), output);
  }

  // optional .gproto.gather.INFO_Equipment equip = 90;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemsn = 10;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->itemsn(), target);
  }

  // required int32 itemtype = 20;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->itemtype(), target);
  }

  // required int32 num = 30;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->num(), target);
  }

  // required int32 type = 40;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->type(), target);
  }

  // required int32 way = 50;
  if (has_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->way(), target);
  }

  // required int32 roleid = 60;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->roleid(), target);
  }

  // required string rolename = 70;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->rolename(), target);
  }

  // required int32 rolelevel = 80;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->rolelevel(), target);
  }

  // optional .gproto.gather.INFO_Equipment equip = 90;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        90, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemsn = 10;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemsn());
    }

    // required int32 itemtype = 20;
    if (has_itemtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // required int32 num = 30;
    if (has_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 type = 40;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 way = 50;
    if (has_way()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->way());
    }

    // required int32 roleid = 60;
    if (has_roleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 70;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolelevel = 80;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .gproto.gather.INFO_Equipment equip = 90;
    if (has_equip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Item::MergeFrom(const MSG_O2G_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_way()) {
      set_way(from.way());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equip()) {
      mutable_equip()->::gproto::gather::INFO_Equipment::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Item::CopyFrom(const MSG_O2G_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void MSG_O2G_Item::Swap(MSG_O2G_Item* other) {
  if (other != this) {
    std::swap(itemsn_, other->itemsn_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(num_, other->num_);
    std::swap(type_, other->type_);
    std::swap(way_, other->way_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Item_descriptor_;
  metadata.reflection = MSG_O2G_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Equip::kRoleidFieldNumber;
const int MSG_O2G_Equip::kRolenameFieldNumber;
const int MSG_O2G_Equip::kEquipsnFieldNumber;
const int MSG_O2G_Equip::kEquipidFieldNumber;
const int MSG_O2G_Equip::kMaketypeFieldNumber;
const int MSG_O2G_Equip::kEquipbeforeFieldNumber;
const int MSG_O2G_Equip::kEquipafterFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Equip::MSG_O2G_Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Equip::InitAsDefaultInstance() {
  equipbefore_ = const_cast< ::gproto::gather::INFO_Equipment*>(&::gproto::gather::INFO_Equipment::default_instance());
  equipafter_ = const_cast< ::gproto::gather::INFO_Equipment*>(&::gproto::gather::INFO_Equipment::default_instance());
}

MSG_O2G_Equip::MSG_O2G_Equip(const MSG_O2G_Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Equip::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipsn_ = 0;
  equipid_ = 0;
  maketype_ = 0;
  equipbefore_ = NULL;
  equipafter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Equip::~MSG_O2G_Equip() {
  SharedDtor();
}

void MSG_O2G_Equip::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete equipbefore_;
    delete equipafter_;
  }
}

void MSG_O2G_Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Equip_descriptor_;
}

const MSG_O2G_Equip& MSG_O2G_Equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Equip* MSG_O2G_Equip::default_instance_ = NULL;

MSG_O2G_Equip* MSG_O2G_Equip::New() const {
  return new MSG_O2G_Equip;
}

void MSG_O2G_Equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    equipsn_ = 0;
    equipid_ = 0;
    maketype_ = 0;
    if (has_equipbefore()) {
      if (equipbefore_ != NULL) equipbefore_->::gproto::gather::INFO_Equipment::Clear();
    }
    if (has_equipafter()) {
      if (equipafter_ != NULL) equipafter_->::gproto::gather::INFO_Equipment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_rolename;
        break;
      }

      // required string rolename = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_equipsn;
        break;
      }

      // required int32 equipsn = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipsn_)));
          set_has_equipsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_equipid;
        break;
      }

      // required int32 equipid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_maketype;
        break;
      }

      // required int32 maketype = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maketype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maketype_)));
          set_has_maketype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_equipbefore;
        break;
      }

      // required .gproto.gather.INFO_Equipment equipbefore = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipbefore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipbefore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_equipafter;
        break;
      }

      // required .gproto.gather.INFO_Equipment equipafter = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipafter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipafter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleid(), output);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rolename(), output);
  }

  // required int32 equipsn = 30;
  if (has_equipsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->equipsn(), output);
  }

  // required int32 equipid = 40;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->equipid(), output);
  }

  // required int32 maketype = 50;
  if (has_maketype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->maketype(), output);
  }

  // required .gproto.gather.INFO_Equipment equipbefore = 60;
  if (has_equipbefore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->equipbefore(), output);
  }

  // required .gproto.gather.INFO_Equipment equipafter = 70;
  if (has_equipafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->equipafter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleid(), target);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->rolename(), target);
  }

  // required int32 equipsn = 30;
  if (has_equipsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->equipsn(), target);
  }

  // required int32 equipid = 40;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->equipid(), target);
  }

  // required int32 maketype = 50;
  if (has_maketype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->maketype(), target);
  }

  // required .gproto.gather.INFO_Equipment equipbefore = 60;
  if (has_equipbefore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->equipbefore(), target);
  }

  // required .gproto.gather.INFO_Equipment equipafter = 70;
  if (has_equipafter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->equipafter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 10;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 20;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 equipsn = 30;
    if (has_equipsn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipsn());
    }

    // required int32 equipid = 40;
    if (has_equipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }

    // required int32 maketype = 50;
    if (has_maketype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maketype());
    }

    // required .gproto.gather.INFO_Equipment equipbefore = 60;
    if (has_equipbefore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipbefore());
    }

    // required .gproto.gather.INFO_Equipment equipafter = 70;
    if (has_equipafter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipafter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Equip::MergeFrom(const MSG_O2G_Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_equipsn()) {
      set_equipsn(from.equipsn());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_maketype()) {
      set_maketype(from.maketype());
    }
    if (from.has_equipbefore()) {
      mutable_equipbefore()->::gproto::gather::INFO_Equipment::MergeFrom(from.equipbefore());
    }
    if (from.has_equipafter()) {
      mutable_equipafter()->::gproto::gather::INFO_Equipment::MergeFrom(from.equipafter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Equip::CopyFrom(const MSG_O2G_Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_equipbefore()) {
    if (!this->equipbefore().IsInitialized()) return false;
  }
  if (has_equipafter()) {
    if (!this->equipafter().IsInitialized()) return false;
  }
  return true;
}

void MSG_O2G_Equip::Swap(MSG_O2G_Equip* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(equipsn_, other->equipsn_);
    std::swap(equipid_, other->equipid_);
    std::swap(maketype_, other->maketype_);
    std::swap(equipbefore_, other->equipbefore_);
    std::swap(equipafter_, other->equipafter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Equip_descriptor_;
  metadata.reflection = MSG_O2G_Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Relive::kRoleidFieldNumber;
const int MSG_O2G_Relive::kRolenameFieldNumber;
const int MSG_O2G_Relive::kRolelevelFieldNumber;
const int MSG_O2G_Relive::kInstancesnFieldNumber;
const int MSG_O2G_Relive::kWastediamondFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Relive::MSG_O2G_Relive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Relive::InitAsDefaultInstance() {
}

MSG_O2G_Relive::MSG_O2G_Relive(const MSG_O2G_Relive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Relive::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelevel_ = 0;
  instancesn_ = 0;
  wastediamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Relive::~MSG_O2G_Relive() {
  SharedDtor();
}

void MSG_O2G_Relive::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_Relive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Relive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Relive_descriptor_;
}

const MSG_O2G_Relive& MSG_O2G_Relive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Relive* MSG_O2G_Relive::default_instance_ = NULL;

MSG_O2G_Relive* MSG_O2G_Relive::New() const {
  return new MSG_O2G_Relive;
}

void MSG_O2G_Relive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelevel_ = 0;
    instancesn_ = 0;
    wastediamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Relive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_rolename;
        break;
      }

      // required string rolename = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_instancesn;
        break;
      }

      // required int32 instancesn = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instancesn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancesn_)));
          set_has_instancesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_wastediamond;
        break;
      }

      // required int32 wastediamond = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wastediamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wastediamond_)));
          set_has_wastediamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Relive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleid(), output);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rolename(), output);
  }

  // required int32 rolelevel = 30;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rolelevel(), output);
  }

  // required int32 instancesn = 40;
  if (has_instancesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->instancesn(), output);
  }

  // required int32 wastediamond = 50;
  if (has_wastediamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->wastediamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Relive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleid(), target);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->rolename(), target);
  }

  // required int32 rolelevel = 30;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rolelevel(), target);
  }

  // required int32 instancesn = 40;
  if (has_instancesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->instancesn(), target);
  }

  // required int32 wastediamond = 50;
  if (has_wastediamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->wastediamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Relive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 10;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 20;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolelevel = 30;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // required int32 instancesn = 40;
    if (has_instancesn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancesn());
    }

    // required int32 wastediamond = 50;
    if (has_wastediamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wastediamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Relive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Relive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Relive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Relive::MergeFrom(const MSG_O2G_Relive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_instancesn()) {
      set_instancesn(from.instancesn());
    }
    if (from.has_wastediamond()) {
      set_wastediamond(from.wastediamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Relive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Relive::CopyFrom(const MSG_O2G_Relive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Relive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MSG_O2G_Relive::Swap(MSG_O2G_Relive* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(instancesn_, other->instancesn_);
    std::swap(wastediamond_, other->wastediamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Relive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Relive_descriptor_;
  metadata.reflection = MSG_O2G_Relive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Instance::kInstancesnFieldNumber;
const int MSG_O2G_Instance::kResultFieldNumber;
const int MSG_O2G_Instance::kPasstimeFieldNumber;
const int MSG_O2G_Instance::kDeadtimesFieldNumber;
const int MSG_O2G_Instance::kRoleidFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Instance::MSG_O2G_Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Instance::InitAsDefaultInstance() {
}

MSG_O2G_Instance::MSG_O2G_Instance(const MSG_O2G_Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Instance::SharedCtor() {
  _cached_size_ = 0;
  instancesn_ = 0;
  result_ = 0;
  passtime_ = 0;
  deadtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Instance::~MSG_O2G_Instance() {
  SharedDtor();
}

void MSG_O2G_Instance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_O2G_Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Instance_descriptor_;
}

const MSG_O2G_Instance& MSG_O2G_Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Instance* MSG_O2G_Instance::default_instance_ = NULL;

MSG_O2G_Instance* MSG_O2G_Instance::New() const {
  return new MSG_O2G_Instance;
}

void MSG_O2G_Instance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instancesn_ = 0;
    result_ = 0;
    passtime_ = 0;
    deadtimes_ = 0;
  }
  roleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instancesn = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancesn_)));
          set_has_instancesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_result;
        break;
      }

      // required int32 result = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_passtime;
        break;
      }

      // required int32 passtime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_deadtimes;
        break;
      }

      // required int32 deadtimes = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadtimes_)));
          set_has_deadtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_roleid;
        break;
      }

      // repeated int32 roleid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 400, input, this->mutable_roleid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roleid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_roleid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instancesn = 10;
  if (has_instancesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->instancesn(), output);
  }

  // required int32 result = 20;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->result(), output);
  }

  // required int32 passtime = 30;
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->passtime(), output);
  }

  // required int32 deadtimes = 40;
  if (has_deadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->deadtimes(), output);
  }

  // repeated int32 roleid = 50;
  for (int i = 0; i < this->roleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      50, this->roleid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 instancesn = 10;
  if (has_instancesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->instancesn(), target);
  }

  // required int32 result = 20;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->result(), target);
  }

  // required int32 passtime = 30;
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->passtime(), target);
  }

  // required int32 deadtimes = 40;
  if (has_deadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->deadtimes(), target);
  }

  // repeated int32 roleid = 50;
  for (int i = 0; i < this->roleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(50, this->roleid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instancesn = 10;
    if (has_instancesn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancesn());
    }

    // required int32 result = 20;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 passtime = 30;
    if (has_passtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passtime());
    }

    // required int32 deadtimes = 40;
    if (has_deadtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadtimes());
    }

  }
  // repeated int32 roleid = 50;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roleid(i));
    }
    total_size += 2 * this->roleid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Instance::MergeFrom(const MSG_O2G_Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleid_.MergeFrom(from.roleid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instancesn()) {
      set_instancesn(from.instancesn());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
    if (from.has_deadtimes()) {
      set_deadtimes(from.deadtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Instance::CopyFrom(const MSG_O2G_Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Instance::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MSG_O2G_Instance::Swap(MSG_O2G_Instance* other) {
  if (other != this) {
    std::swap(instancesn_, other->instancesn_);
    std::swap(result_, other->result_);
    std::swap(passtime_, other->passtime_);
    std::swap(deadtimes_, other->deadtimes_);
    roleid_.Swap(&other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Instance_descriptor_;
  metadata.reflection = MSG_O2G_Instance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_O2G_Arena::kRoleidFieldNumber;
const int MSG_O2G_Arena::kRolenameFieldNumber;
const int MSG_O2G_Arena::kRolelevelFieldNumber;
const int MSG_O2G_Arena::kResultFieldNumber;
#endif  // !_MSC_VER

MSG_O2G_Arena::MSG_O2G_Arena()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_O2G_Arena::InitAsDefaultInstance() {
}

MSG_O2G_Arena::MSG_O2G_Arena(const MSG_O2G_Arena& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_O2G_Arena::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelevel_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_O2G_Arena::~MSG_O2G_Arena() {
  SharedDtor();
}

void MSG_O2G_Arena::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_O2G_Arena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_O2G_Arena::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_O2G_Arena_descriptor_;
}

const MSG_O2G_Arena& MSG_O2G_Arena::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmsg_2eproto();
  return *default_instance_;
}

MSG_O2G_Arena* MSG_O2G_Arena::default_instance_ = NULL;

MSG_O2G_Arena* MSG_O2G_Arena::New() const {
  return new MSG_O2G_Arena;
}

void MSG_O2G_Arena::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelevel_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_O2G_Arena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_rolename;
        break;
      }

      // required string rolename = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rolelevel;
        break;
      }

      // required int32 rolelevel = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_result;
        break;
      }

      // required int32 result = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_O2G_Arena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleid(), output);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rolename(), output);
  }

  // required int32 rolelevel = 30;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rolelevel(), output);
  }

  // required int32 result = 40;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_O2G_Arena::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 10;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleid(), target);
  }

  // required string rolename = 20;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->rolename(), target);
  }

  // required int32 rolelevel = 30;
  if (has_rolelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rolelevel(), target);
  }

  // required int32 result = 40;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_O2G_Arena::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 10;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 20;
    if (has_rolename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolelevel = 30;
    if (has_rolelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // required int32 result = 40;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_O2G_Arena::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_O2G_Arena* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_O2G_Arena*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_O2G_Arena::MergeFrom(const MSG_O2G_Arena& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_O2G_Arena::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_O2G_Arena::CopyFrom(const MSG_O2G_Arena& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_O2G_Arena::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MSG_O2G_Arena::Swap(MSG_O2G_Arena* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_O2G_Arena::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_O2G_Arena_descriptor_;
  metadata.reflection = MSG_O2G_Arena_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gather
}  // namespace gproto

// @@protoc_insertion_point(global_scope)
